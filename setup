#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2020 Manish Sahani
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#user variables
githubrepo="ecrosstexas"
binslist="$HOME/.config/brew-bins.txt"
casklist="$HOME/.config/brew-casks.txt"
macappstore="$HOME/.config/mac-appstore.txt"

# Functions to set colours
green () { printf "\e[32m\n"; }
red () { printf "\e[31m\n"; }
white () { printf "\\e[m\n"; }

function __p () { echo -e "\033[36m$1\033[0m" }
function __s () { echo -e "\033[33m$1\033[0m" }
function __t () { echo -e "\033[92m$1\033[0m" }

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                          /!\ Install dotfiles /!\                           #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  Elegant way to manage and share dotfiles across machines using a single    #
#  git repository (see more ~ https://bit.ly/kalkayan-df)                     #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
echo
echo "ðŸš€ Welcome to the ecrosstexas/dotfiles installer!"
echo "-------------------------------------------------"
echo

# Print information about the project and efforts. Also share a link to the
# documentation. Print them slowly with 0.4 sec delay between lines.
while IFS= read -r l; do ; sleep 0.2 ; __s $l ; done < $HOME/static/message.txt

# //////////////////////////////////////////////////////////////////////////// #


__t "\nEnter your password to begin with the installation\n"

# Ask for sudo beforehand, so that the script doesn't halt installation in the
# later sections.
sudo -v

# Keep sudo session persistent, taken from -- https://gist.github.com/cowboy/3118588
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Create bin directory in home
[ ! -d $HOME/bin ] && mkdir $HOME/bin

# To test that git is installed (if not macOS will prompt an installer)
git --version

echo -n "Press any key to continue..."
read key

echo
echo "OK, now let's get started installing dotfiles..."
echo "------------------------------------------------"
echo

# Make sure we're runing the latest version of this setup script  by checking the github repo
# Check if setup script already existis in home folder
if [[ -e "$HOME/setup" ]]; then
    echo "setup already exsits in home folder"
    echo "Getting latest version of this script from github..."

    rm "$HOME/setup2" 2>/dev/null
    curl -o "$HOME/setup2" "https://raw.githubusercontent.com/$githubrepo/dotfiles/main/setup"
    
    if cmp --silent -- "$HOME/setup" "$HOME/setup2"; then
        echo "Everything is already up-to-date"
        rm "$HOME/setup2"
    else
        echo "The gitbub version is newer so I'm  using that version instead..."
        chmod +x "$HOME/setup2"
        "$HOME/setup2"
        # Now clean up and exit this old script instance
        rm "$HOME/setup2"
        exit 1
    fi
else
    echo "setup does not exist, therefore this script is being run via curl on a first time install...continue"
fi

# Install brew.sh (system package manager) if already not installed
# NB: Brew will install the xcode command line tools if required
if ! brew -h 1>/dev/null; then
    echo "- brew not found, installing..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    echo "- brew install complete"
else
    echo "- brew already installed"
    echo "- upgrading brew..."
    brew  upgrade
fi

# Update brew to latest available version
echo "- brew update"
brew update
echo "- brew update complete"

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                          /!\ Install dotfiles /!\                           #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  Elegant way to manage and share dotfiles across machines using a single    #
#  git repository (see more ~ https://bit.ly/kalkayan-df)                     #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# The trick behind the mangement of dotfiles is cloning it as a bare repository
# therefore, first, we need to define some arguments for the git command. The
# location for the dotfiles is under $HOME directory.
DOTFILES="/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME"

# Brachs gives us the functionality to create profiles of dotfiles for machines
# main is for macos, linux is for ubuntu etc.
DF_BRANCH="main"

# Bring the dotfiles from hosted repository if not already present
if [ ! -d "$HOME/.dotfiles" ]; then
    echo "- .dotfiles does not exisit - pulling from repo: $githubrepo"
    /usr/bin/git clone --bare https://github.com/$githubrepo/dotfiles.git $HOME/.dotfiles
else
    echo "- .dotfiles already exisit"
fi

# Reset the unstagged changes before updating (TODO: experiment with stash)
if [[ " $@ " =~ " --dotfiles-reset " ]]; then
    $DOTFILES reset --hard
fi

# Activate the profile for the current dev machine and Update the dotfiles with
# remote repository
echo "- checkout $DF_BRANCH"
$DOTFILES checkout $DF_BRANCH
echo "- pull origin $DF_BRANCH"
$DOTFILES pull origin $DF_BRANCH

# Brew Binaries - these are binaries that are available as brew formula. A list
# of these formulas are stored in the bins.txt file under ~/.config
# ~ Note ~ : this file is automatically updates with everytime brew installs or
# removes a binary
#mapfile -t bins <  <(cat $HOME/.config/bins.txt)

# Brew Casks - these are the casks that are available as brew formula. A list
# of these casks are stored in the casks.txt under ~/.config/kalkayan folder.
# ~ Note ~ : this file is automatically updates with everytime brew installs or
# removes a casks

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                           /!\ Binaries and Casks /!\                        #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  This section deals with the installation of all the binaries and casks.    #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# required to properly install coreutils
export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"

# Install binaries using Homebrew, iterate over bins array and install.
green
echo "- Checking and installing brew bins from: $binslist"
while IFS= read -r -u 3 line   # Read from file descriptor 3
do
    if [[ ! $line =~ [^[:space:]] ]] ; then # Ignore blank lines
        continue
    fi
    if [[ "$line" =~ \#.* ]];then # Print comment lines
        white
        printf "$line"
        green
    else
        # split the brew formula into binary name and version of installation and
        # get the name of the binary (ex- php in php@7.4)
        b=`echo $line | cut -d \@ -f 1`
        if ! brew list --formula | grep "$b" 1>/dev/null; then
            red
            read -n1 -p "Do you want to instal $line [y/n/q]" ip   # Read from whatever standard input happens to be
            green
                if [ "$ip" = "q" ]
            then
                echo "Quitting..."
                exit 1
            fi 
            if [ "$ip" = "y" ]
            then
            echo "- installing :$line"
            brew install "$line"
            fi 
        else
            echo "- already installed binary: $line"
        fi
    fi
done 3< "$binslist"  # Supply filename for file descriptor 3


# Install casks using Homebrew, iterate over casks array and install.
echo "- Checking and installing brew casks from: $casklist"
while IFS= read -r -u 3 line   # Read from file descriptor 3
do
    if [[ ! $line =~ [^[:space:]] ]] ; then
        continue
    fi
    if [[ "$line" =~ \#.* ]];then
        white
        printf "$line"
        green
    else
        # split the brew formula into binary name and version of installation and
        # get the name of the binary (ex- php in php@7.4)
        b=`echo $line | cut -d \@ -f 1`
        if ! brew list --cask | grep "$b" 1>/dev/null; then
            red
            read -n1 -p "Do you want to instal cask $line [y/n/q]" ip   # Read from whatever standard input happens to be
            green
                if [ "$ip" = "q" ]
            then
                echo "Quitting..."
                exit 1
            fi 
            if [ "$ip" = "y" ]
            then
            echo "- installing :$line"
            brew install cask "$line"
            fi 
        else
            echo "- already installed binary: $line"
        fi
    fi
done 3< "$casklist"  # Supply filename for file descriptor 3

# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                           /!\ Post Installation /!\                         #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #
#                                                                             #
#  This section deals with the setup of specific binaries after installation  #
#                                                                             #
# :-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-:-: #

# Post-Installation
printf "\nPost install section\n\n"
echo "- brew cleanup"
brew cleanup
echo "- Sourcing .zshrc"
[ -f ~/.zshrc ] && source ~/.zshrc
